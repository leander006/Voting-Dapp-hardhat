{
  "address": "0xdb6B624B31ECA39F03C488b8Ce8e6D818d5cb040",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Voting__CannotVoteAgain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Voting__OnlyOwnerCanSetNewVoting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Voting__PreviousVotingRemaining",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Voting__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string[]",
          "name": "parties",
          "type": "string[]"
        }
      ],
      "name": "NewVoting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Parties",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "no",
          "type": "uint256"
        }
      ],
      "name": "getPartiesName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "no",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_Parties",
          "type": "string[]"
        }
      ],
      "name": "setVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "partyNo",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "name",
          "type": "address"
        }
      ],
      "name": "votingStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe427ff151f855658dfb85b3086afcd4e5a670883a3a1f2aa6ef8b1dc855f5672",
  "receipt": {
    "to": null,
    "from": "0xD8EdB888A5Ae2d382cbF8f0974D11417CF7304cF",
    "contractAddress": "0xdb6B624B31ECA39F03C488b8Ce8e6D818d5cb040",
    "transactionIndex": 26,
    "gasUsed": "1314423",
    "logsBloom": "0x
    "blockHash": "0x8c68018be0546f3e79acf30b15359c3ffa60a9e7e9c1b1d226ea594334c822e3",
    "transactionHash": "0xe427ff151f855658dfb85b3086afcd4e5a670883a3a1f2aa6ef8b1dc855f5672",
    "logs": [],
    "blockNumber": 7752850,
    "cumulativeGasUsed": "10706780",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "9900f447ea436b93a73b70f32667c43c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Voting__CannotVoteAgain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__OnlyOwnerCanSetNewVoting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__PreviousVotingRemaining\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string[]\",\"name\":\"parties\",\"type\":\"string[]\"}],\"name\":\"NewVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Parties\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"getPartiesName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_Parties\",\"type\":\"string[]\"}],\"name\":\"setVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"partyNo\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"name\",\"type\":\"address\"}],\"name\":\"votingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Voting__CannotVoteAgain();\\nerror Voting__OnlyOwnerCanSetNewVoting();\\nerror Voting__PreviousVotingRemaining();\\nerror Voting__UpKeepNotNeeded();\\n\\ncontract Voting is AutomationCompatibleInterface {\\n    //State variable //\\n\\n    uint256 public immutable i_interval; // We are dealing with time in seconds //\\n    address public immutable i_owner;\\n\\n    // Voting variable //\\n    string[] public Parties;\\n    mapping(uint256 => uint256) voting;\\n    mapping(address => bool) voters;\\n    string private s_winner;\\n    uint256 private s_lastTimeStamp;\\n    // Events //\\n    event NewVoting(string[] indexed parties);\\n    event Voted(address indexed voter);\\n    event WinnerPicked(string indexed name);\\n\\n    // Constructor //\\n\\n    constructor(uint256 _interval) {\\n        i_interval = _interval;\\n        i_owner = msg.sender;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // Function //\\n\\n    function setVoting(string[] memory _Parties) public {\\n        if (msg.sender != i_owner) {\\n            revert Voting__OnlyOwnerCanSetNewVoting();\\n        }\\n        if ((block.timestamp - s_lastTimeStamp) > i_interval) {\\n            revert Voting__PreviousVotingRemaining();\\n        }\\n        Parties = _Parties;\\n        for (uint256 i = 0; i < Parties.length; i++) {\\n            voting[i] = 0;\\n        }\\n        emit NewVoting(Parties);\\n    }\\n\\n    function vote(uint256 partyNo) public {\\n        if (voters[msg.sender] == true) {\\n            revert Voting__CannotVoteAgain();\\n        }\\n\\n        voters[msg.sender] = true;\\n        voting[partyNo]++;\\n        emit Voted(msg.sender);\\n    }\\n\\n    function results() internal {\\n        uint256 max;\\n        for (uint256 i = 0; i < Parties.length; i++) {\\n            if (voting[i] > max) {\\n                max = voting[i];\\n            }\\n            if (voting[i] == max) {\\n                s_winner = Parties[i];\\n            }\\n        }\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        upkeepNeeded = (block.timestamp - s_lastTimeStamp) > i_interval;\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\" \\\");\\n        if (!upkeepNeeded) {\\n            revert Voting__UpKeepNotNeeded();\\n        }\\n        results();\\n        emit WinnerPicked(s_winner);\\n        delete Parties;\\n    }\\n\\n    // View / Pure //\\n\\n    function getPartiesName(uint256 no) public view returns (string memory) {\\n        return Parties[no];\\n    }\\n\\n    function votingStatus(address name) public view returns (bool) {\\n        return voters[name];\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getLatestTimeStamps() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getWinner() public view returns (string memory) {\\n        return s_winner;\\n    }\\n\\n    function getVotes(uint256 no) public view returns (uint256) {\\n        return voting[no];\\n    }\\n}\\n\",\"keccak256\":\"0x126c659c19030e8459c95fcd2f8acdf9422b92738937a3d91e4345b7d2daba28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638341326b1161008c57806392020fb01161006657806392020fb014610201578063b2161ad114610231578063dba6335f14610261578063ff9810991461027f576100cf565b80638341326b146101a95780638e7ea5b2146101c557806391ad27b4146101e3576100cf565b80630121b93f146100d45780632ef08152146100f057806343a9616f1461010e5780634585e33b1461013e5780636919207d1461015a5780636e04ff0d14610178575b600080fd5b6100ee60048036038101906100e99190610c85565b6102af565b005b6100f8610401565b6040516101059190610cc1565b60405180910390f35b61012860048036038101906101239190610d3a565b61040b565b6040516101359190610d82565b60405180910390f35b61015860048036038101906101539190610e02565b610461565b005b610162610538565b60405161016f9190610cc1565b60405180910390f35b610192600480360381019061018d9190610f90565b61055c565b6040516101a0929190611061565b60405180910390f35b6101c360048036038101906101be9190611213565b610597565b005b6101cd61071d565b6040516101da91906112b1565b60405180910390f35b6101eb6107af565b6040516101f89190610cc1565b60405180910390f35b61021b60048036038101906102169190610c85565b6107d7565b60405161022891906112b1565b60405180910390f35b61024b60048036038101906102469190610c85565b610883565b60405161025891906112b1565b60405180910390f35b610269610933565b60405161027691906112e2565b60405180910390f35b61029960048036038101906102949190610c85565b610957565b6040516102a69190610cc1565b60405180910390f35b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561033a576040517fbbad5bcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600082815260200190815260200160002060008154809291906103b69061132c565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f16a9aa39af49f169911e977347975198c503525f7240d6892a626f0227642fce60405160405180910390a250565b6000600454905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006104a16040518060400160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525061055c565b509050806104db576040517f4b66b68a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104e3610974565b60036040516104f29190611475565b60405180910390207f66e6239145fbbf7d04b52770d72a414d5c7b2bd1ef1ce5837ff92482c377820f60405160405180910390a26000806105339190610a26565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060607f00000000000000000000000000000000000000000000000000000000000000006004544261058f919061148c565b119150915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061c576040517fd3df35f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006004544261064b919061148c565b1115610683576040517f5dcb8c3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060009080519060200190610699929190610a47565b5060005b6000805490508110156106d6576000600160008381526020019081526020016000208190555080806106ce9061132c565b91505061069d565b5060006040516106e691906115f4565b60405180910390207fa12b38d711244e995608ff936ce5530a28ed8bf7c7681ca9bb87e8a7edd34a5960405160405180910390a250565b60606003805461072c906113a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610758906113a4565b80156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081815481106107e757600080fd5b906000526020600020016000915090508054610802906113a4565b80601f016020809104026020016040519081016040528092919081815260200182805461082e906113a4565b801561087b5780601f106108505761010080835404028352916020019161087b565b820191906000526020600020905b81548152906001019060200180831161085e57829003601f168201915b505050505081565b6060600082815481106108995761089861160b565b5b9060005260206000200180546108ae906113a4565b80601f01602080910402602001604051908101604052809291908181526020018280546108da906113a4565b80156109275780601f106108fc57610100808354040283529160200191610927565b820191906000526020600020905b81548152906001019060200180831161090a57829003601f168201915b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060016000838152602001908152602001600020549050919050565b600080600090505b600080549050811015610a225781600160008381526020019081526020016000205411156109bb57600160008281526020019081526020016000205491505b8160016000838152602001908152602001600020541415610a0f57600081815481106109ea576109e961160b565b5b906000526020600020016003908054610a02906113a4565b610a0d929190610aa7565b505b8080610a1a9061132c565b91505061097c565b5050565b5080546000825590600052602060002090810190610a449190610b34565b50565b828054828255906000526020600020908101928215610a96579160200282015b82811115610a95578251829080519060200190610a85929190610b58565b5091602001919060010190610a67565b5b509050610aa39190610b34565b5090565b828054610ab3906113a4565b90600052602060002090601f016020900481019282610ad55760008555610b23565b82601f10610ae65780548555610b23565b82800160010185558215610b2357600052602060002091601f016020900482015b82811115610b22578254825591600101919060010190610b07565b5b509050610b309190610bde565b5090565b5b80821115610b545760008181610b4b9190610bfb565b50600101610b35565b5090565b828054610b64906113a4565b90600052602060002090601f016020900481019282610b865760008555610bcd565b82601f10610b9f57805160ff1916838001178555610bcd565b82800160010185558215610bcd579182015b82811115610bcc578251825591602001919060010190610bb1565b5b509050610bda9190610bde565b5090565b5b80821115610bf7576000816000905550600101610bdf565b5090565b508054610c07906113a4565b6000825580601f10610c195750610c38565b601f016020900490600052602060002090810190610c379190610bde565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6281610c4f565b8114610c6d57600080fd5b50565b600081359050610c7f81610c59565b92915050565b600060208284031215610c9b57610c9a610c45565b5b6000610ca984828501610c70565b91505092915050565b610cbb81610c4f565b82525050565b6000602082019050610cd66000830184610cb2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0782610cdc565b9050919050565b610d1781610cfc565b8114610d2257600080fd5b50565b600081359050610d3481610d0e565b92915050565b600060208284031215610d5057610d4f610c45565b5b6000610d5e84828501610d25565b91505092915050565b60008115159050919050565b610d7c81610d67565b82525050565b6000602082019050610d976000830184610d73565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610dc257610dc1610d9d565b5b8235905067ffffffffffffffff811115610ddf57610dde610da2565b5b602083019150836001820283011115610dfb57610dfa610da7565b5b9250929050565b60008060208385031215610e1957610e18610c45565b5b600083013567ffffffffffffffff811115610e3757610e36610c4a565b5b610e4385828601610dac565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e9d82610e54565b810181811067ffffffffffffffff82111715610ebc57610ebb610e65565b5b80604052505050565b6000610ecf610c3b565b9050610edb8282610e94565b919050565b600067ffffffffffffffff821115610efb57610efa610e65565b5b610f0482610e54565b9050602081019050919050565b82818337600083830152505050565b6000610f33610f2e84610ee0565b610ec5565b905082815260208101848484011115610f4f57610f4e610e4f565b5b610f5a848285610f11565b509392505050565b600082601f830112610f7757610f76610d9d565b5b8135610f87848260208601610f20565b91505092915050565b600060208284031215610fa657610fa5610c45565b5b600082013567ffffffffffffffff811115610fc457610fc3610c4a565b5b610fd084828501610f62565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611013578082015181840152602081019050610ff8565b83811115611022576000848401525b50505050565b600061103382610fd9565b61103d8185610fe4565b935061104d818560208601610ff5565b61105681610e54565b840191505092915050565b60006040820190506110766000830185610d73565b81810360208301526110888184611028565b90509392505050565b600067ffffffffffffffff8211156110ac576110ab610e65565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110d8576110d7610e65565b5b6110e182610e54565b9050602081019050919050565b60006111016110fc846110bd565b610ec5565b90508281526020810184848401111561111d5761111c610e4f565b5b611128848285610f11565b509392505050565b600082601f83011261114557611144610d9d565b5b81356111558482602086016110ee565b91505092915050565b600061117161116c84611091565b610ec5565b9050808382526020820190506020840283018581111561119457611193610da7565b5b835b818110156111db57803567ffffffffffffffff8111156111b9576111b8610d9d565b5b8086016111c68982611130565b85526020850194505050602081019050611196565b5050509392505050565b600082601f8301126111fa576111f9610d9d565b5b813561120a84826020860161115e565b91505092915050565b60006020828403121561122957611228610c45565b5b600082013567ffffffffffffffff81111561124757611246610c4a565b5b611253848285016111e5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006112838261125c565b61128d8185611267565b935061129d818560208601610ff5565b6112a681610e54565b840191505092915050565b600060208201905081810360008301526112cb8184611278565b905092915050565b6112dc81610cfc565b82525050565b60006020820190506112f760008301846112d3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133782610c4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561136a576113696112fd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113bc57607f821691505b602082108114156113d0576113cf611375565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611403816113a4565b61140d81866113d6565b9450600182166000811461142857600181146114395761146c565b60ff1983168652818601935061146c565b611442856113e1565b60005b8381101561146457815481890152600182019150602081019050611445565b838801955050505b50505092915050565b600061148182846113f6565b915081905092915050565b600061149782610c4f565b91506114a283610c4f565b9250828210156114b5576114b46112fd565b5b828203905092915050565b600081549050919050565b600081905092915050565b60008190508160005260206000209050919050565b600081905092915050565b60008154611503816113a4565b61150d81866114eb565b94506001821660008114611528576001811461153a5761156d565b60ff198316865260208601935061156d565b611543856113e1565b60005b8381101561156557815481890152600182019150602081019050611546565b808801955050505b50505092915050565b600061158283836114f6565b905092915050565b6000600182019050919050565b60006115a2826114c0565b6115ac81856114cb565b93506115b7836114d6565b8060005b838110156115e757816115ce8882611576565b97506115d98361158a565b9250506001810190506115bb565b5085935050505092915050565b60006116008284611597565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122087f917725581dd68e742288ea5d82892fcc0d9f4fce29b18449c5f7e9240765364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 77,
        "contract": "contracts/Voting.sol:Voting",
        "label": "Parties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 81,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voting",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 85,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 87,
        "contract": "contracts/Voting.sol:Voting",
        "label": "s_winner",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 89,
        "contract": "contracts/Voting.sol:Voting",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}