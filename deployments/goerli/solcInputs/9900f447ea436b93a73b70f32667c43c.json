{
  "language": "Solidity",
  "sources": {
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\n\nerror Voting__CannotVoteAgain();\nerror Voting__OnlyOwnerCanSetNewVoting();\nerror Voting__PreviousVotingRemaining();\nerror Voting__UpKeepNotNeeded();\n\ncontract Voting is AutomationCompatibleInterface {\n    //State variable //\n\n    uint256 public immutable i_interval; // We are dealing with time in seconds //\n    address public immutable i_owner;\n\n    // Voting variable //\n    string[] public Parties;\n    mapping(uint256 => uint256) voting;\n    mapping(address => bool) voters;\n    string private s_winner;\n    uint256 private s_lastTimeStamp;\n    // Events //\n    event NewVoting(string[] indexed parties);\n    event Voted(address indexed voter);\n    event WinnerPicked(string indexed name);\n\n    // Constructor //\n\n    constructor(uint256 _interval) {\n        i_interval = _interval;\n        i_owner = msg.sender;\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    // Function //\n\n    function setVoting(string[] memory _Parties) public {\n        if (msg.sender != i_owner) {\n            revert Voting__OnlyOwnerCanSetNewVoting();\n        }\n        if ((block.timestamp - s_lastTimeStamp) > i_interval) {\n            revert Voting__PreviousVotingRemaining();\n        }\n        Parties = _Parties;\n        for (uint256 i = 0; i < Parties.length; i++) {\n            voting[i] = 0;\n        }\n        emit NewVoting(Parties);\n    }\n\n    function vote(uint256 partyNo) public {\n        if (voters[msg.sender] == true) {\n            revert Voting__CannotVoteAgain();\n        }\n\n        voters[msg.sender] = true;\n        voting[partyNo]++;\n        emit Voted(msg.sender);\n    }\n\n    function results() internal {\n        uint256 max;\n        for (uint256 i = 0; i < Parties.length; i++) {\n            if (voting[i] > max) {\n                max = voting[i];\n            }\n            if (voting[i] == max) {\n                s_winner = Parties[i];\n            }\n        }\n    }\n\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /* performData */\n        )\n    {\n        upkeepNeeded = (block.timestamp - s_lastTimeStamp) > i_interval;\n    }\n\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\" \");\n        if (!upkeepNeeded) {\n            revert Voting__UpKeepNotNeeded();\n        }\n        results();\n        emit WinnerPicked(s_winner);\n        delete Parties;\n    }\n\n    // View / Pure //\n\n    function getPartiesName(uint256 no) public view returns (string memory) {\n        return Parties[no];\n    }\n\n    function votingStatus(address name) public view returns (bool) {\n        return voters[name];\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n\n    function getLatestTimeStamps() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getWinner() public view returns (string memory) {\n        return s_winner;\n    }\n\n    function getVotes(uint256 no) public view returns (uint256) {\n        return voting[no];\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}